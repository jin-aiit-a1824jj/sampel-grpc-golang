syntax = "proto3";

package greet;
option go_package="greet/greetpb";

message Greeting {
    string first_name = 1;
    string last_name = 2;
}

message GreetRequest {
    Greeting greeting = 1;
}

message GreetResponse {
    string result = 1;
}

message Calculator {
    int64 first_number = 1;
    int64 second_number = 2;
}

message CalculatorRequest {
    Calculator calculator = 1;
}

message CalculatorResponse {
    string result = 1;
    int64 result_int64 = 2;
}

message GreetManyTimesRequest{
    Greeting greeting = 1;
}

message GreetManytimesResponse {
    string result = 1;
}

message PrimeNumberRequest {
    int32 number = 1;
}

message PrimeNumberResponse {
    string result = 1;
}

message LongGreetRequest {
    Greeting greeting = 1;
}

message LongGreetResponse {
    string result = 1;
}

message ComputeAverageRequest {
    int64 number = 1;
}

message ComputeAverageResponse {
    string result = 1;
}

message GreetEveryoneRequest {
    Greeting greeting = 1;
}

message GreetEveryoneResponse {
    string result = 1;
}

message FindMaximumRequest {
    int32 number = 1;
}

message FindMaximumResponse {
    string result = 1;
}

message GreetWithDeadlineRequest {
    Greeting greeting = 1;
}

message GreetWithDeadlineResponse {
    string result = 1;
}

service GreetService{
    // Unary
    rpc Greet(GreetRequest) returns (GreetResponse){};

    // Unary - exercise
    rpc Calculate(CalculatorRequest) returns (CalculatorResponse){};

    // Server Streaming
    rpc GreetManyTimes(GreetManyTimesRequest) returns (stream GreetManytimesResponse){};

    // Server Streaming - exercise
    rpc PrimeNumber(PrimeNumberRequest) returns (stream PrimeNumberResponse){};

    // Client streaming
    rpc LongGreet(stream LongGreetRequest) returns (LongGreetResponse){};

    // Client streaming - exercise
    rpc ComputeAverage(stream ComputeAverageRequest) returns (ComputeAverageResponse){};

    // Bidi Streaming
    rpc GreetEveryone(stream GreetEveryoneRequest) returns (stream GreetEveryoneResponse){};

    // Bidi Streaming - exercise
    rpc FindMaximum(stream FindMaximumRequest) returns (stream FindMaximumResponse){};

    // Unary With Deadline
    rpc GreetWithDeadline(GreetWithDeadlineRequest) returns (GreetWithDeadlineResponse){};
}
